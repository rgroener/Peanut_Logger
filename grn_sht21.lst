   1               		.file	"grn_sht21.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	sht21_init
  12               	sht21_init:
  13               	.LFB7:
  14               		.file 1 "grn_sht21.c"
   1:grn_sht21.c   **** /*	Library File
   2:grn_sht21.c   ****  * 
   3:grn_sht21.c   ****  * 	Sensirion SHT21 Sensor (Temperature / Humidity)
   4:grn_sht21.c   ****  *
   5:grn_sht21.c   ****  * 	grn; Apr 15
   6:grn_sht21.c   ****  */
   7:grn_sht21.c   ****  #define F_CPU 8000000UL                 // set the CPU clock
   8:grn_sht21.c   **** #include <stdio.h>
   9:grn_sht21.c   **** #include <avr/io.h>
  10:grn_sht21.c   **** #include <util/delay.h>
  11:grn_sht21.c   **** #include "grn_TWI.h"
  12:grn_sht21.c   **** #include "grn_sht21.h"
  13:grn_sht21.c   **** 
  14:grn_sht21.c   **** #define SHT21_W 0x80				//SHT21 Adresse und schreiben 	0x80
  15:grn_sht21.c   **** #define SHT21_R 0x81				//SHT21 Adresse und lesen		0x81
  16:grn_sht21.c   **** #define SHT21_TEMP_HOLDMASTER 0xE3		//Tempreature hold master = on =>0b11100011
  17:grn_sht21.c   **** #define SHT21_HUM_HOLDMASTER 0xF3		//Humidity hold master = on => 0b11100101
  18:grn_sht21.c   **** #define SHT21_SOFTRESET 0xFE				//Softreset
  19:grn_sht21.c   **** #define POLYNOMINAL 0x131				//P(x) = x^8+x^5+x^4+1 = 0b100110001
  20:grn_sht21.c   **** 
  21:grn_sht21.c   **** #define T_HOLD 	0
  22:grn_sht21.c   **** #define RH_HOLD 	1
  23:grn_sht21.c   **** 
  24:grn_sht21.c   **** typedef float ft;						//Float VAriable zur Umrechnung vor Rueckgabe
  25:grn_sht21.c   **** 
  26:grn_sht21.c   **** 
  27:grn_sht21.c   **** uint8_t sht21_init(void)
  28:grn_sht21.c   **** {
  15               		.loc 1 28 1 view -0
  16               		.cfi_startproc
  17               	/* prologue: function */
  18               	/* frame size = 0 */
  19               	/* stack size = 0 */
  20               	.L__stack_usage = 0
  29:grn_sht21.c   **** 	/*	
  30:grn_sht21.c   **** 	 * Softreset Sensor
  31:grn_sht21.c   **** 	 */
  32:grn_sht21.c   **** 	TWIStart();
  21               		.loc 1 32 2 view .LVU1
  22 0000 0E94 0000 		call TWIStart
  23               	.LVL0:
  33:grn_sht21.c   **** 	if(TWIGetStatus() != 0x08)return 1; 
  24               		.loc 1 33 2 view .LVU2
  25               		.loc 1 33 5 is_stmt 0 view .LVU3
  26 0004 0E94 0000 		call TWIGetStatus
  27               	.LVL1:
  28               		.loc 1 33 4 view .LVU4
  29 0008 8830      		cpi r24,lo8(8)
  30 000a 01F0      		breq .L7
  31               		.loc 1 33 35 view .LVU5
  32 000c 81E0      		ldi r24,lo8(1)
  33 000e 0895      		ret
  34               	.L7:
  34:grn_sht21.c   **** 	TWIWrite(SHT21_W);
  35               		.loc 1 34 2 is_stmt 1 view .LVU6
  36 0010 80E8      		ldi r24,lo8(-128)
  37 0012 0E94 0000 		call TWIWrite
  38               	.LVL2:
  35:grn_sht21.c   **** 	if(TWIGetStatus() != 0x18)return 2;
  39               		.loc 1 35 2 view .LVU7
  40               		.loc 1 35 5 is_stmt 0 view .LVU8
  41 0016 0E94 0000 		call TWIGetStatus
  42               	.LVL3:
  43               		.loc 1 35 4 view .LVU9
  44 001a 8831      		cpi r24,lo8(24)
  45 001c 01F0      		breq .L8
  46               		.loc 1 35 35 view .LVU10
  47 001e 82E0      		ldi r24,lo8(2)
  48 0020 0895      		ret
  49               	.L8:
  36:grn_sht21.c   **** 	TWIWrite(SHT21_SOFTRESET);
  50               		.loc 1 36 2 is_stmt 1 view .LVU11
  51 0022 8EEF      		ldi r24,lo8(-2)
  52 0024 0E94 0000 		call TWIWrite
  53               	.LVL4:
  37:grn_sht21.c   **** 	if(TWIGetStatus() != 0x28)return 3;
  54               		.loc 1 37 2 view .LVU12
  55               		.loc 1 37 5 is_stmt 0 view .LVU13
  56 0028 0E94 0000 		call TWIGetStatus
  57               	.LVL5:
  58               		.loc 1 37 4 view .LVU14
  59 002c 8832      		cpi r24,lo8(40)
  60 002e 01F4      		brne .L5
  38:grn_sht21.c   **** 	TWIStop();
  61               		.loc 1 38 2 is_stmt 1 view .LVU15
  62 0030 0E94 0000 		call TWIStop
  63               	.LVL6:
  39:grn_sht21.c   **** 	_delay_ms(15);	//Startuptime after Reset <15ms (Datasheet)
  64               		.loc 1 39 2 view .LVU16
  65               	.LBB12:
  66               	.LBI12:
  67               		.file 2 "/usr/avr/include/util/delay.h"
   1:/usr/avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/avr/include/util/delay.h ****    All rights reserved.
   5:/usr/avr/include/util/delay.h **** 
   6:/usr/avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/avr/include/util/delay.h **** 
   9:/usr/avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/avr/include/util/delay.h **** 
  12:/usr/avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/avr/include/util/delay.h ****      distribution.
  16:/usr/avr/include/util/delay.h **** 
  17:/usr/avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/avr/include/util/delay.h **** 
  21:/usr/avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/avr/include/util/delay.h **** 
  33:/usr/avr/include/util/delay.h **** /* $Id: delay.h.in 2506 2016-02-08 10:05:45Z joerg_wunsch $ */
  34:/usr/avr/include/util/delay.h **** 
  35:/usr/avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/avr/include/util/delay.h **** 
  38:/usr/avr/include/util/delay.h **** #ifndef __DOXYGEN__
  39:/usr/avr/include/util/delay.h **** #  ifndef __HAS_DELAY_CYCLES
  40:/usr/avr/include/util/delay.h **** #    define __HAS_DELAY_CYCLES 1
  41:/usr/avr/include/util/delay.h **** #  endif
  42:/usr/avr/include/util/delay.h **** #endif  /* __DOXYGEN__ */
  43:/usr/avr/include/util/delay.h **** 
  44:/usr/avr/include/util/delay.h **** #include <inttypes.h>
  45:/usr/avr/include/util/delay.h **** #include <util/delay_basic.h>
  46:/usr/avr/include/util/delay.h **** #include <math.h>
  47:/usr/avr/include/util/delay.h **** 
  48:/usr/avr/include/util/delay.h **** /** \file */
  49:/usr/avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  50:/usr/avr/include/util/delay.h ****     \code
  51:/usr/avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  52:/usr/avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  53:/usr/avr/include/util/delay.h ****     #include <util/delay.h>
  54:/usr/avr/include/util/delay.h ****     \endcode
  55:/usr/avr/include/util/delay.h **** 
  56:/usr/avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  57:/usr/avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  58:/usr/avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  59:/usr/avr/include/util/delay.h ****     used.
  60:/usr/avr/include/util/delay.h **** 
  61:/usr/avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  62:/usr/avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  63:/usr/avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  64:/usr/avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  65:/usr/avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  66:/usr/avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  67:/usr/avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  68:/usr/avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  69:/usr/avr/include/util/delay.h **** 
  70:/usr/avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  71:/usr/avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  72:/usr/avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  73:/usr/avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  74:/usr/avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  75:/usr/avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  76:/usr/avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  77:/usr/avr/include/util/delay.h ****     routines linked into the application.
  78:/usr/avr/include/util/delay.h **** 
  79:/usr/avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  80:/usr/avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  81:/usr/avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  82:/usr/avr/include/util/delay.h **** 
  83:/usr/avr/include/util/delay.h **** */
  84:/usr/avr/include/util/delay.h **** 
  85:/usr/avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  86:/usr/avr/include/util/delay.h **** static __inline__ void _delay_us(double __us) __attribute__((__always_inline__));
  87:/usr/avr/include/util/delay.h **** static __inline__ void _delay_ms(double __ms) __attribute__((__always_inline__));
  88:/usr/avr/include/util/delay.h **** #endif
  89:/usr/avr/include/util/delay.h **** 
  90:/usr/avr/include/util/delay.h **** #ifndef F_CPU
  91:/usr/avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  92:/usr/avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  93:/usr/avr/include/util/delay.h **** /** \ingroup util_delay
  94:/usr/avr/include/util/delay.h ****     \def F_CPU
  95:/usr/avr/include/util/delay.h ****     \brief CPU frequency in Hz
  96:/usr/avr/include/util/delay.h **** 
  97:/usr/avr/include/util/delay.h ****     The macro F_CPU specifies the CPU frequency to be considered by
  98:/usr/avr/include/util/delay.h ****     the delay macros.  This macro is normally supplied by the
  99:/usr/avr/include/util/delay.h ****     environment (e.g. from within a project header, or the project's
 100:/usr/avr/include/util/delay.h ****     Makefile).  The value 1 MHz here is only provided as a "vanilla"
 101:/usr/avr/include/util/delay.h ****     fallback if no such user-provided definition could be found.
 102:/usr/avr/include/util/delay.h **** 
 103:/usr/avr/include/util/delay.h ****     In terms of the delay functions, the CPU frequency can be given as
 104:/usr/avr/include/util/delay.h ****     a floating-point constant (e.g. 3.6864E6 for 3.6864 MHz).
 105:/usr/avr/include/util/delay.h ****     However, the macros in <util/setbaud.h> require it to be an
 106:/usr/avr/include/util/delay.h ****     integer value.
 107:/usr/avr/include/util/delay.h ****  */
 108:/usr/avr/include/util/delay.h **** # define F_CPU 1000000UL
 109:/usr/avr/include/util/delay.h **** #endif
 110:/usr/avr/include/util/delay.h **** 
 111:/usr/avr/include/util/delay.h **** #ifndef __OPTIMIZE__
 112:/usr/avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
 113:/usr/avr/include/util/delay.h **** #endif
 114:/usr/avr/include/util/delay.h **** 
 115:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 116:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 117:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 118:/usr/avr/include/util/delay.h **** #  include <math.h>
 119:/usr/avr/include/util/delay.h **** #endif
 120:/usr/avr/include/util/delay.h **** 
 121:/usr/avr/include/util/delay.h **** /**
 122:/usr/avr/include/util/delay.h ****    \ingroup util_delay
 123:/usr/avr/include/util/delay.h **** 
 124:/usr/avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 125:/usr/avr/include/util/delay.h **** 
 126:/usr/avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 127:/usr/avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 128:/usr/avr/include/util/delay.h **** 
 129:/usr/avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 130:/usr/avr/include/util/delay.h **** 
 131:/usr/avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 132:/usr/avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 133:/usr/avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 134:/usr/avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 135:/usr/avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 136:/usr/avr/include/util/delay.h **** 
 137:/usr/avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles()
 138:/usr/avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 139:/usr/avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 140:/usr/avr/include/util/delay.h ****    no delay i.e., 0ms.
 141:/usr/avr/include/util/delay.h **** 
 142:/usr/avr/include/util/delay.h ****    Conversion of \c __ms into clock cycles may not always result in
 143:/usr/avr/include/util/delay.h ****    integer.  By default, the clock cycles rounded up to next
 144:/usr/avr/include/util/delay.h ****    integer. This ensures that the user gets at least \c __ms
 145:/usr/avr/include/util/delay.h ****    microseconds of delay.
 146:/usr/avr/include/util/delay.h **** 
 147:/usr/avr/include/util/delay.h ****    Alternatively, by defining the macro \c __DELAY_ROUND_DOWN__, or
 148:/usr/avr/include/util/delay.h ****    \c __DELAY_ROUND_CLOSEST__, before including this header file, the
 149:/usr/avr/include/util/delay.h ****    algorithm can be made to round down, or round to closest integer,
 150:/usr/avr/include/util/delay.h ****    respectively.
 151:/usr/avr/include/util/delay.h **** 
 152:/usr/avr/include/util/delay.h ****    \note
 153:/usr/avr/include/util/delay.h **** 
 154:/usr/avr/include/util/delay.h ****    The implementation of _delay_ms() based on
 155:/usr/avr/include/util/delay.h ****    __builtin_avr_delay_cycles() is not backward compatible with older
 156:/usr/avr/include/util/delay.h ****    implementations.  In order to get functionality backward compatible
 157:/usr/avr/include/util/delay.h ****    with previous versions, the macro \c "__DELAY_BACKWARD_COMPATIBLE__"
 158:/usr/avr/include/util/delay.h ****    must be defined before including this header file. Also, the
 159:/usr/avr/include/util/delay.h ****    backward compatible algorithm will be chosen if the code is
 160:/usr/avr/include/util/delay.h ****    compiled in a <em>freestanding environment</em> (GCC option
 161:/usr/avr/include/util/delay.h ****    \c -ffreestanding), as the math functions required for rounding are
 162:/usr/avr/include/util/delay.h ****    not available to the compiler then.
 163:/usr/avr/include/util/delay.h **** 
 164:/usr/avr/include/util/delay.h ****  */
 165:/usr/avr/include/util/delay.h **** void
 166:/usr/avr/include/util/delay.h **** _delay_ms(double __ms)
  68               		.loc 2 166 1 view .LVU17
  69               	.LBB13:
 167:/usr/avr/include/util/delay.h **** {
 168:/usr/avr/include/util/delay.h **** 	double __tmp ;
  70               		.loc 2 168 2 view .LVU18
 169:/usr/avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 170:/usr/avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 171:/usr/avr/include/util/delay.h ****   __STDC_HOSTED__
 172:/usr/avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 173:/usr/avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 174:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 175:/usr/avr/include/util/delay.h **** 
 176:/usr/avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 177:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 178:/usr/avr/include/util/delay.h **** 
 179:/usr/avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 180:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 181:/usr/avr/include/util/delay.h **** 
 182:/usr/avr/include/util/delay.h **** 	#else
 183:/usr/avr/include/util/delay.h **** 		//round up by default
 184:/usr/avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 185:/usr/avr/include/util/delay.h **** 	#endif
 186:/usr/avr/include/util/delay.h **** 
 187:/usr/avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 188:/usr/avr/include/util/delay.h **** 
 189:/usr/avr/include/util/delay.h **** #else
 190:/usr/avr/include/util/delay.h **** 	uint16_t __ticks;
  71               		.loc 2 190 2 view .LVU19
 191:/usr/avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
  72               		.loc 2 191 2 view .LVU20
 192:/usr/avr/include/util/delay.h **** 	if (__tmp < 1.0)
  73               		.loc 2 192 2 view .LVU21
 193:/usr/avr/include/util/delay.h **** 		__ticks = 1;
 194:/usr/avr/include/util/delay.h **** 	else if (__tmp > 65535)
  74               		.loc 2 194 7 view .LVU22
 195:/usr/avr/include/util/delay.h **** 	{
 196:/usr/avr/include/util/delay.h **** 		//	__ticks = requested delay in 1/10 ms
 197:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 198:/usr/avr/include/util/delay.h **** 		while(__ticks)
 199:/usr/avr/include/util/delay.h **** 		{
 200:/usr/avr/include/util/delay.h **** 			// wait 1/10 ms
 201:/usr/avr/include/util/delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 202:/usr/avr/include/util/delay.h **** 			__ticks --;
 203:/usr/avr/include/util/delay.h **** 		}
 204:/usr/avr/include/util/delay.h **** 		return;
 205:/usr/avr/include/util/delay.h **** 	}
 206:/usr/avr/include/util/delay.h **** 	else
 207:/usr/avr/include/util/delay.h **** 		__ticks = (uint16_t)__tmp;
  75               		.loc 2 207 3 view .LVU23
 208:/usr/avr/include/util/delay.h **** 	_delay_loop_2(__ticks);
  76               		.loc 2 208 2 view .LVU24
  77               	.LBB14:
  78               	.LBI14:
  79               		.file 3 "/usr/avr/include/util/delay_basic.h"
   1:/usr/avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:/usr/avr/include/util/delay_basic.h ****    All rights reserved.
   4:/usr/avr/include/util/delay_basic.h **** 
   5:/usr/avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/avr/include/util/delay_basic.h **** 
   8:/usr/avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/avr/include/util/delay_basic.h **** 
  11:/usr/avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:/usr/avr/include/util/delay_basic.h ****      distribution.
  15:/usr/avr/include/util/delay_basic.h **** 
  16:/usr/avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:/usr/avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:/usr/avr/include/util/delay_basic.h **** 
  20:/usr/avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/avr/include/util/delay_basic.h **** 
  32:/usr/avr/include/util/delay_basic.h **** /* $Id: delay_basic.h 2453 2014-10-19 08:18:11Z saaadhu $ */
  33:/usr/avr/include/util/delay_basic.h **** 
  34:/usr/avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:/usr/avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:/usr/avr/include/util/delay_basic.h **** 
  37:/usr/avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:/usr/avr/include/util/delay_basic.h **** 
  39:/usr/avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  40:/usr/avr/include/util/delay_basic.h **** static __inline__ void _delay_loop_1(uint8_t __count) __attribute__((__always_inline__));
  41:/usr/avr/include/util/delay_basic.h **** static __inline__ void _delay_loop_2(uint16_t __count) __attribute__((__always_inline__));
  42:/usr/avr/include/util/delay_basic.h **** #endif
  43:/usr/avr/include/util/delay_basic.h **** 
  44:/usr/avr/include/util/delay_basic.h **** /** \file */
  45:/usr/avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  46:/usr/avr/include/util/delay_basic.h ****     \code
  47:/usr/avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  48:/usr/avr/include/util/delay_basic.h ****     \endcode
  49:/usr/avr/include/util/delay_basic.h **** 
  50:/usr/avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  51:/usr/avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  52:/usr/avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  53:/usr/avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  54:/usr/avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  55:/usr/avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  56:/usr/avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  57:/usr/avr/include/util/delay_basic.h **** 
  58:/usr/avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  59:/usr/avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  60:/usr/avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  61:/usr/avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
  62:/usr/avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  63:/usr/avr/include/util/delay_basic.h ****     to the overall delay time.
  64:/usr/avr/include/util/delay_basic.h **** 
  65:/usr/avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  66:/usr/avr/include/util/delay_basic.h **** 
  67:/usr/avr/include/util/delay_basic.h **** */
  68:/usr/avr/include/util/delay_basic.h **** 
  69:/usr/avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:/usr/avr/include/util/delay_basic.h **** 
  71:/usr/avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:/usr/avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:/usr/avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:/usr/avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:/usr/avr/include/util/delay_basic.h ****     register.
  76:/usr/avr/include/util/delay_basic.h **** 
  77:/usr/avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:/usr/avr/include/util/delay_basic.h ****     can be achieved.
  79:/usr/avr/include/util/delay_basic.h **** */
  80:/usr/avr/include/util/delay_basic.h **** void
  81:/usr/avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:/usr/avr/include/util/delay_basic.h **** {
  83:/usr/avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:/usr/avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:/usr/avr/include/util/delay_basic.h **** 		"brne 1b"
  86:/usr/avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:/usr/avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:/usr/avr/include/util/delay_basic.h **** 	);
  89:/usr/avr/include/util/delay_basic.h **** }
  90:/usr/avr/include/util/delay_basic.h **** 
  91:/usr/avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:/usr/avr/include/util/delay_basic.h **** 
  93:/usr/avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:/usr/avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:/usr/avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:/usr/avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:/usr/avr/include/util/delay_basic.h ****     counter register pair.
  98:/usr/avr/include/util/delay_basic.h **** 
  99:/usr/avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:/usr/avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:/usr/avr/include/util/delay_basic.h ****  */
 102:/usr/avr/include/util/delay_basic.h **** void
 103:/usr/avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
  80               		.loc 3 103 1 view .LVU25
  81               	.LBB15:
 104:/usr/avr/include/util/delay_basic.h **** {
 105:/usr/avr/include/util/delay_basic.h **** 	__asm__ volatile (
  82               		.loc 3 105 2 view .LVU26
  83 0034 80E3      		ldi r24,lo8(48)
  84 0036 95E7      		ldi r25,lo8(117)
  85               	/* #APP */
  86               	 ;  105 "/usr/avr/include/util/delay_basic.h" 1
  87 0038 0197      		1: sbiw r24,1
  88 003a 01F4      		brne 1b
  89               	 ;  0 "" 2
  90               	.LVL7:
  91               		.loc 3 105 2 is_stmt 0 view .LVU27
  92               	/* #NOAPP */
  93               	.LBE15:
  94               	.LBE14:
  95               	.LBE13:
  96               	.LBE12:
  40:grn_sht21.c   **** 	return 0;
  97               		.loc 1 40 9 view .LVU28
  98 003c 80E0      		ldi r24,0
  99               	.LBB19:
 100               	.LBB18:
 101               	.LBB17:
 102               	.LBB16:
 106:/usr/avr/include/util/delay_basic.h **** 		"1: sbiw %0,1" "\n\t"
 107:/usr/avr/include/util/delay_basic.h **** 		"brne 1b"
 108:/usr/avr/include/util/delay_basic.h **** 		: "=w" (__count)
 109:/usr/avr/include/util/delay_basic.h **** 		: "0" (__count)
 110:/usr/avr/include/util/delay_basic.h **** 	);
 111:/usr/avr/include/util/delay_basic.h **** }
 103               		.loc 3 111 1 view .LVU29
 104 003e 0895      		ret
 105               	.LVL8:
 106               	.L5:
 107               		.loc 3 111 1 view .LVU30
 108               	.LBE16:
 109               	.LBE17:
 110               	.LBE18:
 111               	.LBE19:
  37:grn_sht21.c   **** 	TWIStop();
 112               		.loc 1 37 35 view .LVU31
 113 0040 83E0      		ldi r24,lo8(3)
 114               	/* epilogue start */
  41:grn_sht21.c   **** }
 115               		.loc 1 41 1 view .LVU32
 116 0042 0895      		ret
 117               		.cfi_endproc
 118               	.LFE7:
 120               	.global	__floatunsisf
 121               	.global	__mulsf3
 122               	.global	__subsf3
 123               	.global	__fixunssfsi
 124               	.global	sht21_measure
 126               	sht21_measure:
 127               	.LVL9:
 128               	.LFB8:
  42:grn_sht21.c   **** 
  43:grn_sht21.c   **** uint16_t sht21_measure(uint8_t measure_mode)
  44:grn_sht21.c   **** {
 129               		.loc 1 44 1 is_stmt 1 view -0
 130               		.cfi_startproc
 131               		.loc 1 44 1 is_stmt 0 view .LVU34
 132 0044 CF93      		push r28
 133               	.LCFI0:
 134               		.cfi_def_cfa_offset 3
 135               		.cfi_offset 28, -2
 136 0046 DF93      		push r29
 137               	.LCFI1:
 138               		.cfi_def_cfa_offset 4
 139               		.cfi_offset 29, -3
 140 0048 00D0      		rcall .
 141 004a 00D0      		rcall .
 142 004c 0F92      		push __tmp_reg__
 143               	.LCFI2:
 144               		.cfi_def_cfa_offset 9
 145 004e CDB7      		in r28,__SP_L__
 146 0050 DEB7      		in r29,__SP_H__
 147               	.LCFI3:
 148               		.cfi_def_cfa_register 28
 149               	/* prologue: function */
 150               	/* frame size = 5 */
 151               	/* stack size = 7 */
 152               	.L__stack_usage = 7
 153 0052 8983      		std Y+1,r24
  45:grn_sht21.c   **** 	/*
  46:grn_sht21.c   **** 	 * 	Temperaturmessung / Überprüfung der Checksumme	
  47:grn_sht21.c   **** 	 * 
  48:grn_sht21.c   **** 	 * 	Rückgabewert: 	16 bit Temperaturwert x 100 
  49:grn_sht21.c   **** 	 * 					(letzte 2 Stellen sind Nachkommastellen)
  50:grn_sht21.c   **** 	 * 	Checksum error: Rückgabewert = 99;
  51:grn_sht21.c   **** 	 */ 
  52:grn_sht21.c   **** 	 
  53:grn_sht21.c   **** 	uint8_t bit_l, bit_h, crc, checksum;
 154               		.loc 1 53 2 is_stmt 1 view .LVU35
  54:grn_sht21.c   **** 	uint16_t messwert, rueckgabewert;
 155               		.loc 1 54 2 view .LVU36
  55:grn_sht21.c   **** 	bit_l=0;
 156               		.loc 1 55 2 view .LVU37
 157               	.LVL10:
  56:grn_sht21.c   **** 	bit_h=0;
 158               		.loc 1 56 2 view .LVU38
  57:grn_sht21.c   **** 	checksum = 0;
 159               		.loc 1 57 2 view .LVU39
  58:grn_sht21.c   **** 	messwert=0;
 160               		.loc 1 58 2 view .LVU40
  59:grn_sht21.c   **** 	rueckgabewert=0;
 161               		.loc 1 59 2 view .LVU41
  60:grn_sht21.c   **** 	crc=0;
 162               		.loc 1 60 2 view .LVU42
  61:grn_sht21.c   **** 		
  62:grn_sht21.c   **** 	TWIStart();							//start TWI
 163               		.loc 1 62 2 view .LVU43
 164 0054 0E94 0000 		call TWIStart
 165               	.LVL11:
  63:grn_sht21.c   **** 	if(TWIGetStatus() != 0x08)return 4; //kontrolle ob erfolgreich sonst Abbruch mit Error Code
 166               		.loc 1 63 2 view .LVU44
 167               		.loc 1 63 5 is_stmt 0 view .LVU45
 168 0058 0E94 0000 		call TWIGetStatus
 169               	.LVL12:
 170               		.loc 1 63 4 view .LVU46
 171 005c 8830      		cpi r24,lo8(8)
 172 005e 01F0      		breq .L23
 173               		.loc 1 63 35 view .LVU47
 174 0060 84E0      		ldi r24,lo8(4)
 175 0062 90E0      		ldi r25,0
 176               	.LVL13:
 177               	.L9:
 178               	/* epilogue start */
  64:grn_sht21.c   **** 	TWIWrite(SHT21_W);					//Adresse und Schreiben
  65:grn_sht21.c   **** 	if(TWIGetStatus() != 0x18)return 5;	//kontrolle ob erfolgreich sonst Abbruch mit Error Code
  66:grn_sht21.c   **** 	switch(measure_mode)
  67:grn_sht21.c   **** 	{
  68:grn_sht21.c   **** 		case T_HOLD:	TWIWrite(SHT21_TEMP_HOLDMASTER);break;	//Modus = Temperatur master hold = on
  69:grn_sht21.c   **** 		case RH_HOLD:	TWIWrite(SHT21_HUM_HOLDMASTER);break;	//Modus = Temperatur master hold = on
  70:grn_sht21.c   **** 	}
  71:grn_sht21.c   **** 	if(TWIGetStatus() != 0x28)return 6;	//kontrolle ob erfolgreich sonst Abbruch mit Error Code
  72:grn_sht21.c   **** 
  73:grn_sht21.c   **** 	DDRC &= ~(1<<PC5);					//set SCL as Input
  74:grn_sht21.c   **** 	while(!(PINC &= ~(1<<PC5)));		//wait to end conversion (Master hold mode)
  75:grn_sht21.c   **** 	DDRC |= (1<<PC5);					//set SCL as Output
  76:grn_sht21.c   **** 
  77:grn_sht21.c   **** 	TWIStart();							//restart TWI
  78:grn_sht21.c   **** 	if(TWIGetStatus() != 0x10)return 7; //kontrolle ob erfolgreich sonst Abbruch mit Error Code
  79:grn_sht21.c   **** 	TWIWrite(SHT21_R);					//Adresse und lesen
  80:grn_sht21.c   **** 	if(TWIGetStatus() != 0x40)return 8;	//kontrolle ob erfolgreich sonst Abbruch mit Error Code
  81:grn_sht21.c   **** 	bit_h = TWIReadACK();				//empfange MSB
  82:grn_sht21.c   **** 	if(TWIGetStatus() != 0x50)return 9;	//kontrolle ob erfolgreich sonst Abbruch mit Error Code
  83:grn_sht21.c   **** 	bit_l = TWIReadNACK();				//empfange LSB / durch NACK wird checksumme nicht empfangen
  84:grn_sht21.c   **** 										//darum auskomm. der nächsten Zeilen.
  85:grn_sht21.c   **** 										//mit Checksumme bricht öfters ab mit Error 11
  86:grn_sht21.c   **** 												
  87:grn_sht21.c   **** 	/*
  88:grn_sht21.c   **** 	bit_l = TWIReadACK();				//empfange LSB
  89:grn_sht21.c   **** 	_delay_ms(50);
  90:grn_sht21.c   **** 	if(TWIGetStatus() != 0x50)return 10;//kontrolle ob erfolgreich sonst Abbruch mit Error Code
  91:grn_sht21.c   **** 	_delay_ms(50);
  92:grn_sht21.c   **** 	checksum = TWIReadNACK();			//empfange Checksum
  93:grn_sht21.c   **** 	_delay_ms(50);
  94:grn_sht21.c   **** 	if(TWIGetStatus() != 0x58)return 11;//kontrolle ob erfolgreich sonst Abbruch mit Error Code
  95:grn_sht21.c   **** 	_delay_ms(50);
  96:grn_sht21.c   **** 	* 
  97:grn_sht21.c   **** 	*/
  98:grn_sht21.c   **** 	TWIStop();							//schliesse TWI
  99:grn_sht21.c   **** 	
 100:grn_sht21.c   **** 	/*
 101:grn_sht21.c   **** 	 * 	Checksummenprüfung
 102:grn_sht21.c   **** 	 */	
 103:grn_sht21.c   **** 		/*crc ^= bit_h;
 104:grn_sht21.c   **** 		for(uint8_t x=8; x>0;--x)
 105:grn_sht21.c   **** 		{
 106:grn_sht21.c   **** 			if(crc & 0x80)
 107:grn_sht21.c   **** 			{
 108:grn_sht21.c   **** 				crc = (crc<<1) ^ POLYNOMINAL;
 109:grn_sht21.c   **** 			}else
 110:grn_sht21.c   **** 			{
 111:grn_sht21.c   **** 				crc=(crc<<1);
 112:grn_sht21.c   **** 			}
 113:grn_sht21.c   **** 		} 
 114:grn_sht21.c   **** 		crc ^= bit_l;
 115:grn_sht21.c   **** 		for(uint8_t x=8; x>0;--x)
 116:grn_sht21.c   **** 		{
 117:grn_sht21.c   **** 			if(crc & 0x80)
 118:grn_sht21.c   **** 			{
 119:grn_sht21.c   **** 				crc = (crc<<1) ^ POLYNOMINAL;
 120:grn_sht21.c   **** 			}else
 121:grn_sht21.c   **** 			{
 122:grn_sht21.c   **** 				crc=(crc<<1);
 123:grn_sht21.c   **** 			}
 124:grn_sht21.c   **** 		} 
 125:grn_sht21.c   **** 		if(crc!=checksum) return 99;*/
 126:grn_sht21.c   **** 				
 127:grn_sht21.c   **** 	 /*
 128:grn_sht21.c   **** 	 * Berechnung Temperatur und Rückgabewert
 129:grn_sht21.c   **** 	 */
 130:grn_sht21.c   **** 		messwert=(bit_h<<8)|bit_l;						//8 bit werte zu 16bit Wert zusammensetzen
 131:grn_sht21.c   **** 		messwert &= ~0x003;								//Loescht letzte 2 Bits (Status Bits)
 132:grn_sht21.c   **** 		rueckgabewert = 100*(-46.85 + 175.72/65536 * (ft)messwert);	//Berechnung Tempreatur
 133:grn_sht21.c   **** 	
 134:grn_sht21.c   **** 		return rueckgabewert;	
 135:grn_sht21.c   **** }//End of SHT21_read_temp
 179               		.loc 1 135 1 view .LVU48
 180 0064 0F90      		pop __tmp_reg__
 181 0066 0F90      		pop __tmp_reg__
 182 0068 0F90      		pop __tmp_reg__
 183 006a 0F90      		pop __tmp_reg__
 184 006c 0F90      		pop __tmp_reg__
 185 006e DF91      		pop r29
 186 0070 CF91      		pop r28
 187 0072 0895      		ret
 188               	.LVL14:
 189               	.L23:
  64:grn_sht21.c   **** 	TWIWrite(SHT21_W);					//Adresse und Schreiben
 190               		.loc 1 64 2 is_stmt 1 view .LVU49
 191 0074 80E8      		ldi r24,lo8(-128)
 192 0076 0E94 0000 		call TWIWrite
 193               	.LVL15:
  65:grn_sht21.c   **** 	switch(measure_mode)
 194               		.loc 1 65 2 view .LVU50
  65:grn_sht21.c   **** 	switch(measure_mode)
 195               		.loc 1 65 5 is_stmt 0 view .LVU51
 196 007a 0E94 0000 		call TWIGetStatus
 197               	.LVL16:
  65:grn_sht21.c   **** 	switch(measure_mode)
 198               		.loc 1 65 4 view .LVU52
 199 007e 8831      		cpi r24,lo8(24)
 200 0080 01F4      		brne .L16
  66:grn_sht21.c   **** 	{
 201               		.loc 1 66 2 is_stmt 1 view .LVU53
 202 0082 2981      		ldd r18,Y+1
 203 0084 2223      		tst r18
 204 0086 01F4      		brne .+2
 205 0088 00C0      		rjmp .L11
 206 008a 2130      		cpi r18,lo8(1)
 207 008c 01F0      		breq .L12
 208               	.L13:
  71:grn_sht21.c   **** 
 209               		.loc 1 71 2 view .LVU54
  71:grn_sht21.c   **** 
 210               		.loc 1 71 5 is_stmt 0 view .LVU55
 211 008e 0E94 0000 		call TWIGetStatus
 212               	.LVL17:
  71:grn_sht21.c   **** 
 213               		.loc 1 71 4 view .LVU56
 214 0092 8832      		cpi r24,lo8(40)
 215 0094 01F4      		brne .L17
 216               	.L25:
  73:grn_sht21.c   **** 	while(!(PINC &= ~(1<<PC5)));		//wait to end conversion (Master hold mode)
 217               		.loc 1 73 2 is_stmt 1 view .LVU57
  73:grn_sht21.c   **** 	while(!(PINC &= ~(1<<PC5)));		//wait to end conversion (Master hold mode)
 218               		.loc 1 73 7 is_stmt 0 view .LVU58
 219 0096 3D98      		cbi 0x7,5
  74:grn_sht21.c   **** 	DDRC |= (1<<PC5);					//set SCL as Output
 220               		.loc 1 74 2 is_stmt 1 view .LVU59
 221               	.L14:
  74:grn_sht21.c   **** 	DDRC |= (1<<PC5);					//set SCL as Output
 222               		.loc 1 74 29 discriminator 1 view .LVU60
  74:grn_sht21.c   **** 	DDRC |= (1<<PC5);					//set SCL as Output
 223               		.loc 1 74 7 discriminator 1 view .LVU61
  74:grn_sht21.c   **** 	DDRC |= (1<<PC5);					//set SCL as Output
 224               		.loc 1 74 15 is_stmt 0 discriminator 1 view .LVU62
 225 0098 86B1      		in r24,0x6
 226 009a 8F7D      		andi r24,lo8(-33)
 227 009c 86B9      		out 0x6,r24
  74:grn_sht21.c   **** 	DDRC |= (1<<PC5);					//set SCL as Output
 228               		.loc 1 74 7 discriminator 1 view .LVU63
 229 009e 8823      		tst r24
 230 00a0 01F0      		breq .L14
  75:grn_sht21.c   **** 
 231               		.loc 1 75 2 is_stmt 1 view .LVU64
  75:grn_sht21.c   **** 
 232               		.loc 1 75 7 is_stmt 0 view .LVU65
 233 00a2 3D9A      		sbi 0x7,5
  77:grn_sht21.c   **** 	if(TWIGetStatus() != 0x10)return 7; //kontrolle ob erfolgreich sonst Abbruch mit Error Code
 234               		.loc 1 77 2 is_stmt 1 view .LVU66
 235 00a4 0E94 0000 		call TWIStart
 236               	.LVL18:
  78:grn_sht21.c   **** 	TWIWrite(SHT21_R);					//Adresse und lesen
 237               		.loc 1 78 2 view .LVU67
  78:grn_sht21.c   **** 	TWIWrite(SHT21_R);					//Adresse und lesen
 238               		.loc 1 78 5 is_stmt 0 view .LVU68
 239 00a8 0E94 0000 		call TWIGetStatus
 240               	.LVL19:
  78:grn_sht21.c   **** 	TWIWrite(SHT21_R);					//Adresse und lesen
 241               		.loc 1 78 4 view .LVU69
 242 00ac 8031      		cpi r24,lo8(16)
 243 00ae 01F0      		breq .L24
  78:grn_sht21.c   **** 	TWIWrite(SHT21_R);					//Adresse und lesen
 244               		.loc 1 78 35 view .LVU70
 245 00b0 87E0      		ldi r24,lo8(7)
 246 00b2 90E0      		ldi r25,0
 247               	/* epilogue start */
 248               		.loc 1 135 1 view .LVU71
 249 00b4 0F90      		pop __tmp_reg__
 250 00b6 0F90      		pop __tmp_reg__
 251 00b8 0F90      		pop __tmp_reg__
 252 00ba 0F90      		pop __tmp_reg__
 253 00bc 0F90      		pop __tmp_reg__
 254 00be DF91      		pop r29
 255 00c0 CF91      		pop r28
 256 00c2 0895      		ret
 257               	.L12:
  69:grn_sht21.c   **** 	}
 258               		.loc 1 69 17 is_stmt 1 view .LVU72
 259 00c4 83EF      		ldi r24,lo8(-13)
 260 00c6 0E94 0000 		call TWIWrite
 261               	.LVL20:
  69:grn_sht21.c   **** 	}
 262               		.loc 1 69 48 view .LVU73
  71:grn_sht21.c   **** 
 263               		.loc 1 71 2 view .LVU74
  71:grn_sht21.c   **** 
 264               		.loc 1 71 5 is_stmt 0 view .LVU75
 265 00ca 0E94 0000 		call TWIGetStatus
 266               	.LVL21:
  71:grn_sht21.c   **** 
 267               		.loc 1 71 4 view .LVU76
 268 00ce 8832      		cpi r24,lo8(40)
 269 00d0 01F0      		breq .L25
 270               	.L17:
  71:grn_sht21.c   **** 
 271               		.loc 1 71 35 view .LVU77
 272 00d2 86E0      		ldi r24,lo8(6)
 273 00d4 90E0      		ldi r25,0
 274               	/* epilogue start */
 275               		.loc 1 135 1 view .LVU78
 276 00d6 0F90      		pop __tmp_reg__
 277 00d8 0F90      		pop __tmp_reg__
 278 00da 0F90      		pop __tmp_reg__
 279 00dc 0F90      		pop __tmp_reg__
 280 00de 0F90      		pop __tmp_reg__
 281 00e0 DF91      		pop r29
 282 00e2 CF91      		pop r28
 283 00e4 0895      		ret
 284               	.L24:
  79:grn_sht21.c   **** 	if(TWIGetStatus() != 0x40)return 8;	//kontrolle ob erfolgreich sonst Abbruch mit Error Code
 285               		.loc 1 79 2 is_stmt 1 view .LVU79
 286 00e6 81E8      		ldi r24,lo8(-127)
 287 00e8 0E94 0000 		call TWIWrite
 288               	.LVL22:
  80:grn_sht21.c   **** 	bit_h = TWIReadACK();				//empfange MSB
 289               		.loc 1 80 2 view .LVU80
  80:grn_sht21.c   **** 	bit_h = TWIReadACK();				//empfange MSB
 290               		.loc 1 80 5 is_stmt 0 view .LVU81
 291 00ec 0E94 0000 		call TWIGetStatus
 292               	.LVL23:
  80:grn_sht21.c   **** 	bit_h = TWIReadACK();				//empfange MSB
 293               		.loc 1 80 4 view .LVU82
 294 00f0 8034      		cpi r24,lo8(64)
 295 00f2 01F0      		breq .L26
  80:grn_sht21.c   **** 	bit_h = TWIReadACK();				//empfange MSB
 296               		.loc 1 80 35 view .LVU83
 297 00f4 88E0      		ldi r24,lo8(8)
 298 00f6 90E0      		ldi r25,0
 299 00f8 00C0      		rjmp .L9
 300               	.L16:
  65:grn_sht21.c   **** 	switch(measure_mode)
 301               		.loc 1 65 35 view .LVU84
 302 00fa 85E0      		ldi r24,lo8(5)
 303 00fc 90E0      		ldi r25,0
 304               	/* epilogue start */
 305               		.loc 1 135 1 view .LVU85
 306 00fe 0F90      		pop __tmp_reg__
 307 0100 0F90      		pop __tmp_reg__
 308 0102 0F90      		pop __tmp_reg__
 309 0104 0F90      		pop __tmp_reg__
 310 0106 0F90      		pop __tmp_reg__
 311 0108 DF91      		pop r29
 312 010a CF91      		pop r28
 313 010c 0895      		ret
 314               	.L11:
  68:grn_sht21.c   **** 		case RH_HOLD:	TWIWrite(SHT21_HUM_HOLDMASTER);break;	//Modus = Temperatur master hold = on
 315               		.loc 1 68 16 is_stmt 1 view .LVU86
 316 010e 83EE      		ldi r24,lo8(-29)
 317 0110 0E94 0000 		call TWIWrite
 318               	.LVL24:
  68:grn_sht21.c   **** 		case RH_HOLD:	TWIWrite(SHT21_HUM_HOLDMASTER);break;	//Modus = Temperatur master hold = on
 319               		.loc 1 68 48 view .LVU87
  68:grn_sht21.c   **** 		case RH_HOLD:	TWIWrite(SHT21_HUM_HOLDMASTER);break;	//Modus = Temperatur master hold = on
 320               		.loc 1 68 3 is_stmt 0 view .LVU88
 321 0114 00C0      		rjmp .L13
 322               	.L26:
  81:grn_sht21.c   **** 	if(TWIGetStatus() != 0x50)return 9;	//kontrolle ob erfolgreich sonst Abbruch mit Error Code
 323               		.loc 1 81 2 is_stmt 1 view .LVU89
  81:grn_sht21.c   **** 	if(TWIGetStatus() != 0x50)return 9;	//kontrolle ob erfolgreich sonst Abbruch mit Error Code
 324               		.loc 1 81 10 is_stmt 0 view .LVU90
 325 0116 0E94 0000 		call TWIReadACK
 326               	.LVL25:
 327 011a 8D83      		std Y+5,r24
 328               	.LVL26:
  82:grn_sht21.c   **** 	bit_l = TWIReadNACK();				//empfange LSB / durch NACK wird checksumme nicht empfangen
 329               		.loc 1 82 2 is_stmt 1 view .LVU91
  82:grn_sht21.c   **** 	bit_l = TWIReadNACK();				//empfange LSB / durch NACK wird checksumme nicht empfangen
 330               		.loc 1 82 5 is_stmt 0 view .LVU92
 331 011c 0E94 0000 		call TWIGetStatus
 332               	.LVL27:
  82:grn_sht21.c   **** 	bit_l = TWIReadNACK();				//empfange LSB / durch NACK wird checksumme nicht empfangen
 333               		.loc 1 82 4 view .LVU93
 334 0120 8035      		cpi r24,lo8(80)
 335 0122 01F0      		breq .+2
 336 0124 00C0      		rjmp .L20
  83:grn_sht21.c   **** 										//darum auskomm. der nächsten Zeilen.
 337               		.loc 1 83 2 is_stmt 1 view .LVU94
  83:grn_sht21.c   **** 										//darum auskomm. der nächsten Zeilen.
 338               		.loc 1 83 10 is_stmt 0 view .LVU95
 339 0126 0E94 0000 		call TWIReadNACK
 340               	.LVL28:
 341 012a 8983      		std Y+1,r24
 342               	.LVL29:
  98:grn_sht21.c   **** 	
 343               		.loc 1 98 2 is_stmt 1 view .LVU96
 344 012c 0E94 0000 		call TWIStop
 345               	.LVL30:
 130:grn_sht21.c   **** 		messwert &= ~0x003;								//Loescht letzte 2 Bits (Status Bits)
 346               		.loc 1 130 3 view .LVU97
 130:grn_sht21.c   **** 		messwert &= ~0x003;								//Loescht letzte 2 Bits (Status Bits)
 347               		.loc 1 130 22 is_stmt 0 view .LVU98
 348 0130 3D81      		ldd r19,Y+5
 349 0132 4981      		ldd r20,Y+1
 350 0134 932F      		mov r25,r19
 351 0136 842F      		mov r24,r20
 352               	.LVL31:
 131:grn_sht21.c   **** 		rueckgabewert = 100*(-46.85 + 175.72/65536 * (ft)messwert);	//Berechnung Tempreatur
 353               		.loc 1 131 3 is_stmt 1 view .LVU99
 132:grn_sht21.c   **** 	
 354               		.loc 1 132 3 view .LVU100
 131:grn_sht21.c   **** 		rueckgabewert = 100*(-46.85 + 175.72/65536 * (ft)messwert);	//Berechnung Tempreatur
 355               		.loc 1 131 12 is_stmt 0 view .LVU101
 356 0138 8C7F      		andi r24,252
 357               	.LVL32:
 132:grn_sht21.c   **** 	
 358               		.loc 1 132 48 view .LVU102
 359 013a 9C01      		movw r18,r24
 360 013c 50E0      		ldi r21,0
 361 013e 40E0      		ldi r20,0
 362 0140 2983      		std Y+1,r18
 363 0142 3A83      		std Y+2,r19
 364 0144 4B83      		std Y+3,r20
 365 0146 5C83      		std Y+4,r21
 366               	.LVL33:
 132:grn_sht21.c   **** 	
 367               		.loc 1 132 48 view .LVU103
 368 0148 CA01      		movw r24,r20
 369               	.LVL34:
 132:grn_sht21.c   **** 	
 370               		.loc 1 132 48 view .LVU104
 371 014a B901      		movw r22,r18
 372 014c 0E94 0000 		call __floatunsisf
 373               	.LVL35:
 132:grn_sht21.c   **** 	
 374               		.loc 1 132 46 view .LVU105
 375 0150 22E5      		ldi r18,lo8(82)
 376 0152 38EB      		ldi r19,lo8(-72)
 377 0154 4FE2      		ldi r20,lo8(47)
 378 0156 5BE3      		ldi r21,lo8(59)
 379 0158 6983      		std Y+1,r22
 380 015a 7A83      		std Y+2,r23
 381 015c 8B83      		std Y+3,r24
 382 015e 9C83      		std Y+4,r25
 383 0160 6981      		ldd r22,Y+1
 384 0162 7A81      		ldd r23,Y+2
 385 0164 8B81      		ldd r24,Y+3
 386 0166 9C81      		ldd r25,Y+4
 387 0168 0E94 0000 		call __mulsf3
 388               	.LVL36:
 132:grn_sht21.c   **** 	
 389               		.loc 1 132 31 view .LVU106
 390 016c 26E6      		ldi r18,lo8(102)
 391 016e 36E6      		ldi r19,lo8(102)
 392 0170 4BE3      		ldi r20,lo8(59)
 393 0172 52E4      		ldi r21,lo8(66)
 394 0174 6983      		std Y+1,r22
 395 0176 7A83      		std Y+2,r23
 396 0178 8B83      		std Y+3,r24
 397 017a 9C83      		std Y+4,r25
 398 017c 6981      		ldd r22,Y+1
 399 017e 7A81      		ldd r23,Y+2
 400 0180 8B81      		ldd r24,Y+3
 401 0182 9C81      		ldd r25,Y+4
 402 0184 0E94 0000 		call __subsf3
 403               	.LVL37:
 132:grn_sht21.c   **** 	
 404               		.loc 1 132 22 view .LVU107
 405 0188 20E0      		ldi r18,0
 406 018a 30E0      		ldi r19,0
 407 018c 48EC      		ldi r20,lo8(-56)
 408 018e 52E4      		ldi r21,lo8(66)
 409 0190 6983      		std Y+1,r22
 410 0192 7A83      		std Y+2,r23
 411 0194 8B83      		std Y+3,r24
 412 0196 9C83      		std Y+4,r25
 413 0198 6981      		ldd r22,Y+1
 414 019a 7A81      		ldd r23,Y+2
 415 019c 8B81      		ldd r24,Y+3
 416 019e 9C81      		ldd r25,Y+4
 417 01a0 0E94 0000 		call __mulsf3
 418               	.LVL38:
 132:grn_sht21.c   **** 	
 419               		.loc 1 132 17 view .LVU108
 420 01a4 6983      		std Y+1,r22
 421 01a6 7A83      		std Y+2,r23
 422 01a8 8B83      		std Y+3,r24
 423 01aa 9C83      		std Y+4,r25
 424 01ac 6981      		ldd r22,Y+1
 425 01ae 7A81      		ldd r23,Y+2
 426 01b0 8B81      		ldd r24,Y+3
 427 01b2 9C81      		ldd r25,Y+4
 428 01b4 0E94 0000 		call __fixunssfsi
 429               	.LVL39:
 430 01b8 CB01      		movw r24,r22
 431               	.LVL40:
 134:grn_sht21.c   **** }//End of SHT21_read_temp
 432               		.loc 1 134 3 is_stmt 1 view .LVU109
 134:grn_sht21.c   **** }//End of SHT21_read_temp
 433               		.loc 1 134 10 is_stmt 0 view .LVU110
 434 01ba 00C0      		rjmp .L9
 435               	.LVL41:
 436               	.L20:
  82:grn_sht21.c   **** 	bit_l = TWIReadNACK();				//empfange LSB / durch NACK wird checksumme nicht empfangen
 437               		.loc 1 82 35 view .LVU111
 438 01bc 89E0      		ldi r24,lo8(9)
 439 01be 90E0      		ldi r25,0
 440 01c0 00C0      		rjmp .L9
 441               		.cfi_endproc
 442               	.LFE8:
 444               	.Letext0:
 445               		.file 4 "/usr/avr/include/stdint.h"
 446               		.file 5 "grn_TWI.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 grn_sht21.c
     /tmp/ccn2XhgN.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccn2XhgN.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccn2XhgN.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccn2XhgN.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccn2XhgN.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccn2XhgN.s:12     .text:0000000000000000 sht21_init
     /tmp/ccn2XhgN.s:126    .text:0000000000000044 sht21_measure

UNDEFINED SYMBOLS
TWIStart
TWIGetStatus
TWIWrite
TWIStop
__floatunsisf
__mulsf3
__subsf3
__fixunssfsi
TWIReadACK
TWIReadNACK
